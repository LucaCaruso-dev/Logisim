#
# std/Builtin.java
#
builtinLibrary = 内置
# instance/StdAttr.java
stdFacingAttr = 朝向
stdDataWidthAttr = 数据位宽
stdTriggerAttr = 触发方式
stdTriggerRising = 上升沿
stdTriggerFalling = 下降沿
stdTriggerHigh = 高电平
stdTriggerLow = 低电平
stdTriggerLatch = 无使能
stdLabelAttr = 标签
stdLabelFontAttr = 标签字体
# instance/InstanceTextField.java
changeLabelAction = 更改标签
#
# std/base/Base.java
#
baseLibrary = 基础库(Base)

# std/base/BitExtender.java
extenderComponent = 位扩展器
extenderInAttr = 输入位宽
extenderOutAttr = 输出位宽
extenderTypeAttr = 扩展方式
extenderOneType = 1扩展
extenderZeroType = 0扩展
extenderSignType = 符号扩展
extenderInputType = 输入扩展
extenderMainLabel = 扩展器
extenderOneLabel = 1
extenderZeroLabel = 0
extenderSignLabel = 符号
extenderInputLabel = 输入

# std/base/Clock
clockComponent = 时钟(Clock)
clockHighAttr = 高电平时长
clockLowAttr = 低电平时长
clockDurationValue = %s 滴答
clockDurationOneValue = %s 滴答
durationSmallMessage = 值不能小于 %s.
durationLargeMessage = 值不能大于 %s.
freqInvalidMessage = 值不是一个有效整数

# std/base/Pin
pinComponent = 引脚(Pin)
pinInputName = 输入
pinOutputName = 输出
pinThreeStateAttr = 三态?
pinOutputAttr = 输出引脚?
pinPullAttr = 未定义处理
pinPullNoneOption = 不变
pinPullUpOption = 上拉
pinPullDownOption = 下拉
pinLabelLocAttr = 标签位置
pinInputToolTip = 添加一个输入引脚
pinOutputToolTip = 添加一个输出引脚
pinFrozenTitle = 引脚已经连接到主电路.
pinFrozenQuestion = 引脚已经连接到主电路，要新建一个状态吗?

# std/base/Probe
probeComponent = 探针(Probe)

# std/base/PullResistor
pullComponent = 上/下拉电阻
pullTypeAttr = 上/下拉方向
pullZeroType = 0
pullOneType = 1
pullErrorType = 错误

# std/base/Text.java
textComponent = 标签(Label)
textTextAttr = 文本
textFontAttr = 字体
textHorzAlignAttr = 水平对齐
textHorzAlignLeftOpt = 左
textHorzAlignRightOpt = 右
textHorzAlignCenterOpt = 中心
textVertAlignAttr = 垂直对齐
textVertAlignTopOpt = 顶端
textVertAlignBaseOpt = 基线
textVertAlignBottomOpt = 底端
textVertAlignCenterOpt = 中心

# std/base/Tunnel.java
tunnelComponent = 隧道(Tunnel)

#
# std/Wiring.java
#
wiringLibrary = 线路(Wiring)
wiringGateAttr = Gate Location
wiringGateBottomRightOption = 底部/右侧
wiringGateTopLeftOption = 顶部/左侧

# std/wiring/ProgrammableGenerator.java
ProgrammableGeneratorComponent = 可编程发生器

# std/wiring/Transistor.java
transistorComponent = 三极管
transistorTypeAttr = 类型
transistorTypeP = P-型
transistorTypeN = N-型

# std/wiring/TransmissionGate.java
transmissionGateComponent = 传输门(Transmission Gate)

# std/wiring/Power.java
powerComponent = 电源(Power)

# std/wiring/Ground.java
groundComponent = 接地(Ground)

#
# std/Gates.java
#
gatesLibrary = 逻辑门(Gates)
gateSizeAttr = 门尺寸
gateSizeNarrowOpt = 小尺寸
gateSizeNormalOpt = 中等
gateSizeWideOpt = 大尺寸
gateNegateAttr = 反转 %s
gateInputsAttr = 输入引脚数
gateOutput01 = 0/1
gateOutput0Z = 0/未定义
gateOutputZ1 = 未定义/1
gateOutputAttr = 输出值
xorBehaviorAttr = 多输入行为
xorBehaviorOne = 当一个输入为1时输出为1
xorBehaviorOdd = 当奇数个输入为1时输出为1
# std/Constant.java
constantComponent = 常量(Constant)
constantValueAttr = 值
# std/NotGate.java
notGateComponent = 非门(NOT Gate)
# std/Buffer.java
bufferComponent = 缓冲器(Buffer)
# std/AndGate.java
andGateComponent = 与门(AND Gate)
# std/NandGate.java
nandGateComponent = 与非门(NAND Gate)
# std/NorGate.java
norGateComponent = 或非门(NOR Gate)
# std/OrGate.java
orGateComponent = 或门(OR Gate)
# std/XorGate.java
xorGateComponent = 异或门(XOR Gate)
# std/XnorGate.java
xnorGateComponent = 异或非(XNOR Gate)
# std/OddParityGate.java
oddParityComponent = 奇校验(Odd Parity)
# std/EvenParityGate.java
evenParityComponent = 偶校验(Even Parity)
# std/ControlledBuffer.java
controlledBufferComponent = 三态门(Controlled Buffer)
controlledInverterComponent = 三态非门(Controlled Inverter)
controlledControlOption = 控制线路位置
controlledLeftHanded = 左手型
controlledRightHanded = 右手型
NegateBufferControl = 非门控制输入(Negate Control Input)
#
# std/TTL.java
#
VccGndPorts = 包括电源/接地引脚
ShowInternalStructure = 显示内部结构
LampTestInTip = Lamp Test: when 0, sets all the outputs to 1
BlankingInputInTip = Blanking Input: when 0, sets all the outputs to 0
RippleBlankingInputInTip = Ripple Blanking Input: when it's 0 and A, B, C, D are 0, sets all the outputs to 0
#
# std/Memory.java
#
memoryLibrary = 存储库(Memory)
memEnableLabel = en
# AbstractFlipFlop.java
flipFlopClockTip = 时钟: 触发时更新状态
flipFlopQTip = 当前触发器状态
flipFlopNotQTip = 当前触发器状态的非值
latchETip = 启用：触发时状态更新
latchQTip = 当前锁存器状态
latchNotQTip = 当前锁存器状态的补充
flipFlopResetTip = 清空:当输入1时,异步重置触发器状态为0
flipFlopPresetTip = 置位:当输入为%s,异步重置触发器状态为1
flipFlopEnableTip = 使能：当输入为零时，忽略时钟输入
PresetClearPosition = 置位/清零 位置
AboveBelow = 上/下
BelowAbove = 下/上
Legacy = Legacy
NegatePresetClear = 非门 置位/清零 输入
NewFFLayout = 使用新布局
# std/Counter.java
counterComponent = 计数器(Counter)
counterMaxAttr   = 最大值
counterGoalAttr  = 溢出时操作
counterGoalWrap  = 重新计数
counterGoalStay  = 保持最大值
counterGoalContinue = 继续计数
counterGoalLoad  = 加载下一个值
counterQTip      = 输出:当前计数值
counterClockTip  = 时钟: 触发时更新状态
counterDataTip   = 数据:加载进计数器的值
counterLoadTip   = 加载:为1时,如果计数端为0,从数据端加载值;否则进行反向计数
counterEnableTip = 计数:为1时,进行计数,如果加载端为1,进行反向计数
counterResetTip  = 清空:为1时,异步重置计数器为0
counterCarryTip  = 进位:正向计数达到最大值时输出1;反向计数达到最小值时输出1
counterEnableLabel = ct
counterLabel = ctr
counterBehavior = 计数器行为
counterNewBehavior = 新行为
counterOldBehavior = 旧行为
newcounterLoadTip = 加载：为1时从数据端加载值
newcounterReverseCountTip = 反向计数: 为1时反向计数
newcounterEnableTip = 使能: 为0时停止计数
# std/DFlipFlop.java
dFlipFlopComponent = D触发器(D Flip-Flop)
# std/TFlipFlop.java
tFlipFlopComponent = T触发器(T Flip-Flop)
# std/JKFlipFlop.java
jkFlipFlopComponent = JK触发器(J-K Flip-Flop)
# std/SRFlipFlop.java
srFlipFlopComponent = RS触发器(S-R Flip-Flop)
# std/DLatch.java
dLatchComponent = D 锁存器(D Latch)
# std/SRLatch.java
srLatchComponent = S-R 锁存器(S-R Latch)
# std/PlaRom.java
PlaRomComponent = 可编程逻辑门阵列(PLA ROM)
PlaOutputsAttr = 输出数
PlaANDAttr = 内部与门数目
PlaRomEnabletip = 使能: 为0时禁用
# std/Random.java
randomSeedAttr = 种子
randomComponent = 随机数生成器(Random Generator)
randomQTip = 输出:随机序列中的当前随机值
randomClockTip = 时钟:当触发时更新生成器状态
randomNextTip = 使能:触发时跳到下一个随机值
randomResetTip = 清空:当为1时,异步重置到种子的值
# std/Register.java
registerComponent = 寄存器(Register)
registerQTip = 输出:当前寄存器的值
registerDTip = 数据:当时钟触发时输入到寄存器的值
registerClkTip = 时钟:当触发时更新寄存器值
registerClrTip = 清空:为1时,异步重置寄存器到0（小心毛刺）
registerPreTip = 置位:为1时,异步重置寄存器到1（小心毛刺）
registerEnableTip = 使能:当为0时,忽略时钟输入
registerLabel = Reg
registerWidthLabel = (%sb)
# std/RamFactory.java
ramComponent = 随机存储器(RAM)
# std/RomFactory.java
romComponent = 只读存储器(ROM)
romContentsAttr = 存储数据
romContentsValue = (点击进行编辑)
romChangeAction = 编辑存储数据
# std/Ram.java
ramAddrWidthAttr = 地址位宽
ramDataWidthAttr = 数据位宽
ramSelAttr = 片选信号有效值:
ramDataLabel = D
ramAddrLabel = A
ramWELabel = str
ramCSLabel = sel
ramOELabel = ld
ramClrLabel = clr
ramGigabyteLabel = %sGB RAM
ramMegabyteLabel = %sMB RAM
ramKilobyteLabel = %sKB RAM
ramByteLabel = %sB RAM
romGigabyteLabel = %sGB ROM
romMegabyteLabel = %sMB ROM
romKilobyteLabel = %sKB ROM
romByteLabel = %sB ROM
memDataTip = 数据:对应地址单元的数据
memAddrTip = 地址:需要访问数据的地址
memCSTip = 片选: %s 禁用组件
ramClkTip = 时钟:从0到1时更新内存数据
ramOETip = 加载:为1时,将内存加载到输出
ramWETip = 存储:为1时,从输入端存储数据
ramClrTip = 清空:当为1时,异步重置内存为全0
ramBusTip = 数据:存储在指定地址的数据
ramInTip = 输入:即将写入的数据值
ramBusAttr = 数据接口
ramBusSynchCombined = 一个同步加载/存储引脚
ramBusAsynchCombined = 一个异步加载/存储引脚
ramBusSeparate = 分离的加载和存储引脚
ramEditMenuItem = 编辑存储内容...
ramClearMenuItem = 清空所有数据内容
ramLoadMenuItem = 加载数据镜像...
ramSaveMenuItem = 保存数据镜像...
ramConfirmClearTitle = 确认清空
ramConfirmClearMsg = 你确定你希望将内存数据全部清0吗?
ramLoadDialogTitle = 加载RAM镜像
romLoadDialogTitle = 加载ROM镜像
ramLoadErrorTitle = 加载错误
ramSaveDialogTitle = 保存RAM镜像
romSaveDialogTitle = 保存ROM镜像
ramSaveErrorTitle = 保存错误
# std/memory/ShiftRegister.java
shiftRegisterComponent = 移位寄存器(Shift Register)
shiftRegisterLabel1 = shift reg
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = 存储段数
shiftRegParallelAttr = 并行加载
shiftRegShiftTip = 移位:为0时禁用移位
shiftRegClockTip = 时钟:触发时更新状态
shiftRegClearTip = 清空:为1时,异步重置所有单元为0
shiftRegInTip    = 输入:将存储到第一段的数据
shiftRegOutTip   = 输出:最后一个存储段的数据
shiftRegLoadTip  = 加载:为1且移位端为0时,将所有存储段更新为输入端的数据

#
# std/Plexers.java
#
plexerLibrary = 复用器(Plexers)
plexerSelectBitsAttr = 选择端位宽
plexerThreeStateAttr = 三态?
plexerDisabledAttr = 禁用时的输出
plexerDisabledFloating = 未定义
plexerDisabledZero = 0
plexerNoInputStateAttr = 启动时加载库
plexerEnableAttr = 包含使能端?
plexerSelectLocAttr = 选择端位置
plexerSelectTopRightOption = 顶部/右侧
plexerSelectBottomLeftOption = 底部/左侧
# std/Multiplexer.java
multiplexerComponent = 多路选择器(Multiplexer)
multiplexerSelectTip = 选择: 控制那一路输入输出
multiplexerEnableTip = 使能: 不为0时输出选择输入
multiplexerInTip = 输入%s
multiplexerOutTip = 输出
# std/Demultiplexer.java
demultiplexerComponent = 解复用器(Demultiplexer)
demultiplexerSelectTip = 选择:定义哪个输出端输出输入数据
demultiplexerEnableTip = 使能: 不为0时选择正确输出端输出
demultiplexerInTip = 输入
demultiplexerOutTip = 输出%s
# std/Decoder.java
decoderComponent = 译码器(Decoder)
decoderSelectTip = 选择:控制哪个输出为1
decoderEnableTip = 使能:当不是0时,选择的输出成为1
decoderOutTip = 输出%s
# std/DisplayDecoder.java
DisplayDecoderComponent = 7段数码管译码器(7-Segment Display Decoder)
DisplayDecoderOutTip = 输出 %s
DisplayDecoderInTip = 输入 %s
# std/plexers/PriorityEncoder.java
priorityEncoderComponent = 优先编码器(Priority Encoder)
priorityEncoderInTip = 输入 %s
priorityEncoderOutTip = 输出:位置最大的值为1的输入的地址
priorityEncoderEnableInTip = 使能输入: 为零禁用组件
priorityEncoderEnableOutTip = 使能输出: 为1且没有输入端为1，输出1
priorityEncoderGroupSignalTip = 组选择: 如果使能端为1且有输入端为1，输出1
# std/BitSelector.java
bitSelectorComponent = 位选择器(Bit Selector)
bitSelectorGroupAttr = 输出位宽
bitSelectorOutputTip = 输出:从数据端输入所选择的比特位元组的值
bitSelectorDataTip = 数据
bitSelectorSelectTip = 选择:定义选择数据端输入的哪个比特位元组
#
# arith/Arithmetic.java
#
arithmeticLibrary = 运算器(Arithmetic)
# arith/Adder.java
adderComponent = 加法器(Adder)
adderInputTip = 输入:相加数
adderOutputTip = 输出:和数(加上进位)
adderCarryInTip = 进位输入
adderCarryOutTip = 进位输出
# arith/Subtractor.java
subtractorComponent = 减法器(Subtractor)
subtractorMinuendTip = 被减数
subtractorSubtrahendTip = 减数
subtractorOutputTip = 输出:差值
subtractorBorrowInTip = 借位输入:如果是1,输出时减去1
subtractorBorrowOutTip = 借位输出:如果最终得到负数则为1
# arith/Multiplier.java
multiplierComponent = 乘法器(Multiplier)
multiplierInputTip = 输入:乘数
multiplierOutputTip = 输出:两个输入的积,加上进位输入
multiplierCarryInTip = 进位输入:需要加入结果的数
multiplierCarryOutTip = 进位输出:乘积的高位比特
# arith/Divider.java
dividerComponent = 除法器(Divider)
dividerUpperInput = upper
dividerRemainderOutput = rem
dividerDividendLowerTip = 被除数低位:被除数的低位部分
dividerDividendUpperTip = 被除数高位:被除数的高位部分
dividerDivisorTip = 除数
dividerOutputTip = 输出:商
dividerRemainderTip = 余数:被除数-商*除数
# arith/Negator.java
negatorComponent = 求补器(Negator)
negatorInputTip = 输入:需要得到相反数的数
negatorOutputTip = 输出:输入数负值关于2的补码
# arith/Comparator.java
comparatorComponent = 比较器(Comparator)
comparatorType = 比较器类型
unsignedOption = 无符号
twosComplementOption = 2的补码
comparatorInputATip = A:要执行比较操作的数
comparatorInputBTip = B:要执行比较操作的数
comparatorLessTip = 小于:如果A<B,输出1
comparatorEqualTip = 等于:如果A=B,输出1
comparatorGreaterTip = 大于:如果A>B,输出1
# arith/Shifter.java
shifterComponent = 移位器(Shifter)
shifterShiftAttr = 移位类型
shiftLogicalLeft = 逻辑左移
shiftLogicalRight = 逻辑右移
shiftArithmeticRight = 运算右移
shiftRollLeft = 循环左移
shiftRollRight = 循环右移
shifterDistanceTip = 位数:移几位
shifterInputTip = 输入:需要移位的数据
shifterOutputTip = 输出:移位后的结果
# arith/BitAdder.java
bitAdderComponent = 逐位加法器(Bit Adder)
bitAdderInputTip = 输入:需要计算的数据
bitAdderOutputManyTip = 输出:输入数据有多少位为1
# arith/BitFinder.java
bitFinderComponent = 位查找器(Bit Finder)
bitFinderFindLabel = find
bitFinderHighLabel = high
bitFinderLowLabel = low
bitFinderHighOption = 索引位置最高的%s
bitFinderLowOption = 索引位置最低的%s
bitFinderTypeAttr = 类型
bitFinderIndexHighTip = 下标:输入中索引位置最高的%s的下标
bitFinderIndexLowTip = 下标:输入中索引位置最低的%s的下标
bitFinderPresentTip = 当前:如果输入数据包含%s则为1
bitFinderInputTip = 输入:需要查找的数据
#
# io
#
# io/Io.java
ioLibrary = 输入/输出(Input/Output)
ioLabelCenter = 中心
ioBitWidthAttr = 位宽
ioColorAttr = 颜色
ioLabelLocAttr = 标签位置
ioLabelColorAttr = 标签颜色
ioActiveAttr = 高电平有效?
# io/Button.java
buttonComponent = 按钮(Button)
# io/Switch.java
switchComponent = 开关(Switch)
# io/DipSwitch.java
DipSwitchComponent = 拨码开关(Dip Switch)
NumberOfSwitch= 开关数目
# io/Slider.java
right_to_leftOption = 从右到左
left_to_rightOption = 从左到右
# io/Joystick.java
joystickComponent = 摇杆(Joystick)
# io/Keyboard.java
keyboardComponent = 键盘(Keyboard)
keybDesc = 键盘 (缓冲容量. %s)
keybBufferLengthAttr = 缓冲长度
keybClearTip = 清空:为1时清空缓冲区
keybClockTip = 时钟:触发时消耗缓冲区最前端的字符
keybEnableTip = 读使能:为0时忽略时钟输入
keybAvailTip = 数据可用:如果缓冲区内含有字符则为1
keybOutputTip = 数据: %s 当前缓冲区最前端字符的ASCII码
# io/Buzzer.java
buzzerComponent = 蜂鸣器(Buzzer)
enableSound = 使能: 为1时打开声音
buzzerVolume = 音量 (0-127)
buzzerVolumeBitWidth = 音量数据位
buzzerFrequecy = 频率 (12b)
# io/Led.java
ledComponent = 发光二极管(LED)
# io/RGBLed.java
rgbledComponent = 彩色发光二极管(RGB LED)
ioMultiBit = 多位?
# io/DigitalOscilloscope.java
DigitalOscilloscopeComponent = 数字示波器(Digital Oscilloscope)
NStateAttr = 示波器可视状态数
ShowClockAttribute = 显示时钟输入波形?
DrawClockFrontLine= 时钟边沿辅助线
noOption= 无
bothOption= 上跳沿下跳沿均显示
BorderColor = 边框颜色
DigitalOscilloscopeClock = 时钟输入
ClearDiagram = 清除输出: 为1时清除波形
# io/SevenSegment.java
sevenSegmentComponent = 7段数码管(7-Segment Display)
# io/HexDigit.java
hexDigitComponent = 16进制数字显示(Hex Digit Display)
# io/DotMatrix.java
dotMatrixComponent = LED点阵(LED Matrix)
ioMatrixInput = 输入格式
ioMatrixRows = 点阵行数
ioMatrixCols = 点阵列数
ioOnColor = 点亮时颜色
ioOffColor = 熄灭时颜色
ioBackgroundColor = 背景
ioMatrixPersistenceAttr = 灯光持续时间
ioMatrixShape = LED点的形状
Column = 列 %s
Row = 行 %s
ioInputColumn = 列
ioInputRow = 行
ioInputSelect = 选择行/列
ioShapeCircle = 圆形
ioShapeSquare = 方形
# io/Tty.java
ttyComponent = 文本哑终端(TTY)
ttyDesc = 哑终端(%s行,%s列)
ttyDescShort = 哑终端
ttyRowsAttr = 行数
ttyColsAttr = 列数
ttyClearTip = 清空:为1时清空屏幕
ttyClockTip = 时钟:触发时写入数据端的字符
ttyEnableTip = 写入使能:为0时忽略时钟输入
ttyInputTip = 数据:下一个需写入字符的ASCII码
